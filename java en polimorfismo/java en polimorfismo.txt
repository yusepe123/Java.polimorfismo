private < protected < public


Correcto. La palabra llave con menor visibilidad es private, después viene protected y después public.

private - solo visible dentro de la clase.

protected - visible dentro de la clase y también para las hijas.

public - visible en todo lugar.

------------------------------------------------------------------------------

También tenga en cuenta que protected está relacionado con la herencia.

Solo la propia clase en sí ve atributos/métodos private, mientras que protected es visto por la propia clase más las clases hijas.


Correcto. Atributos y métodos protected pueden ser vistos por su propia clase y sus hijas. Sin embargo, con private solo la clase en sí ve los atributos/métodos.

-------------------------------------------------------------------------------

public class Gerente extends Funcionario {

    private int contraseña;

    public int getContraseña() {
        return contraseña;
    }

    public void setContraseña(int contraseña) {
        this.contraseña = contraseña;
    }

    public boolean autenticar(int contraseña) {
        if (this.contraseña == contraseña) {
            return true;
        } else {
            return false;
        }
    }

    // Nuevo método, recibiendo dos parámetros
    public boolean autenticar(String login, int contraseña) {
        // implementación omitida
    }

    // Otros métodos omitidos
}

-----------------------------------------------------------------------------------------------

public double getBonificacion() {
    return super.getBonificacion();
}

public double getBonificacion() {
    return super.getBonificacion() + super.getSalario();
}

public class TestGerente {

    public static void main(String[] args) {

        Gerente g1 = new Gerente();
        g1.setNombre("Marco");
        g1.setDocumentoIdentidad("235568413");
        g1.setSalario(5000.0);

        System.out.println(g1.getNombre());
        System.out.println(g1.getDocumentoIdentidad());
        System.out.println(g1.getSalario());

        g1.setContraseña(2222);
        boolean autenticou = g1.autenticar(2222);

        System.out.println(autenticou);

        System.out.println(g1.getBonificacion());
    }


}
------------------------------------------------------------------------
Porque la referencia e es de tipo Funcionario e la clase Funcionario no tiene el método autenticar.


Correcto. Quien define lo que podemos chamar es la referencia, que es del tipo Funcionario, y es la clase Funcionario el que realmente no tiene ese método.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

public class SistemaInterno {

    private int contraseña = 2222;

    public void autenticar(Gerente g) {

        boolean autentico = g.autenticar(this.contraseña);

        if (autentico) {
            System.out.println("Puede entrar al sistema");
        } else {
            System.out.println("No puede entrar al sistema");
        }
    }
}